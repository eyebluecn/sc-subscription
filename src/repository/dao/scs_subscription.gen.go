// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"github.com/eyebluecn/sc-misc/src/model/po"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSubscriptionDO(db *gorm.DB, opts ...gen.DOOption) subscriptionDO {
	_subscriptionDO := subscriptionDO{}

	_subscriptionDO.subscriptionDODo.UseDB(db, opts...)
	_subscriptionDO.subscriptionDODo.UseModel(&po.SubscriptionPO{})

	tableName := _subscriptionDO.subscriptionDODo.TableName()
	_subscriptionDO.ALL = field.NewAsterisk(tableName)
	_subscriptionDO.ID = field.NewInt64(tableName, "id")
	_subscriptionDO.CreateTime = field.NewTime(tableName, "create_time")
	_subscriptionDO.UpdateTime = field.NewTime(tableName, "update_time")
	_subscriptionDO.ReaderID = field.NewInt64(tableName, "reader_id")
	_subscriptionDO.ColumnID = field.NewInt64(tableName, "column_id")
	_subscriptionDO.OrderID = field.NewInt64(tableName, "order_id")
	_subscriptionDO.Status = field.NewInt32(tableName, "status")

	_subscriptionDO.fillFieldMap()

	return _subscriptionDO
}

// subscriptionDO 订阅表
type subscriptionDO struct {
	subscriptionDODo subscriptionDODo

	ALL        field.Asterisk
	ID         field.Int64 // 主键
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间
	ReaderID   field.Int64 // 读者id
	ColumnID   field.Int64 // 专栏id
	OrderID    field.Int64 // 订单id
	Status     field.Int32 // 状态 0/1/2

	fieldMap map[string]field.Expr
}

func (s subscriptionDO) Table(newTableName string) *subscriptionDO {
	s.subscriptionDODo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscriptionDO) As(alias string) *subscriptionDO {
	s.subscriptionDODo.DO = *(s.subscriptionDODo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscriptionDO) updateTableName(table string) *subscriptionDO {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.ReaderID = field.NewInt64(table, "reader_id")
	s.ColumnID = field.NewInt64(table, "column_id")
	s.OrderID = field.NewInt64(table, "order_id")
	s.Status = field.NewInt32(table, "status")

	s.fillFieldMap()

	return s
}

func (s *subscriptionDO) WithContext(ctx context.Context) *subscriptionDODo {
	return s.subscriptionDODo.WithContext(ctx)
}

func (s subscriptionDO) TableName() string { return s.subscriptionDODo.TableName() }

func (s subscriptionDO) Alias() string { return s.subscriptionDODo.Alias() }

func (s subscriptionDO) Columns(cols ...field.Expr) gen.Columns {
	return s.subscriptionDODo.Columns(cols...)
}

func (s *subscriptionDO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscriptionDO) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["reader_id"] = s.ReaderID
	s.fieldMap["column_id"] = s.ColumnID
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["status"] = s.Status
}

func (s subscriptionDO) clone(db *gorm.DB) subscriptionDO {
	s.subscriptionDODo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscriptionDO) replaceDB(db *gorm.DB) subscriptionDO {
	s.subscriptionDODo.ReplaceDB(db)
	return s
}

type subscriptionDODo struct{ gen.DO }

func (s subscriptionDODo) Debug() *subscriptionDODo {
	return s.withDO(s.DO.Debug())
}

func (s subscriptionDODo) WithContext(ctx context.Context) *subscriptionDODo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriptionDODo) ReadDB() *subscriptionDODo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriptionDODo) WriteDB() *subscriptionDODo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriptionDODo) Session(config *gorm.Session) *subscriptionDODo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriptionDODo) Clauses(conds ...clause.Expression) *subscriptionDODo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriptionDODo) Returning(value interface{}, columns ...string) *subscriptionDODo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriptionDODo) Not(conds ...gen.Condition) *subscriptionDODo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriptionDODo) Or(conds ...gen.Condition) *subscriptionDODo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriptionDODo) Select(conds ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriptionDODo) Where(conds ...gen.Condition) *subscriptionDODo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriptionDODo) Order(conds ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriptionDODo) Distinct(cols ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriptionDODo) Omit(cols ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriptionDODo) Join(table schema.Tabler, on ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriptionDODo) LeftJoin(table schema.Tabler, on ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriptionDODo) RightJoin(table schema.Tabler, on ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriptionDODo) Group(cols ...field.Expr) *subscriptionDODo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriptionDODo) Having(conds ...gen.Condition) *subscriptionDODo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriptionDODo) Limit(limit int) *subscriptionDODo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriptionDODo) Offset(offset int) *subscriptionDODo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriptionDODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *subscriptionDODo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriptionDODo) Unscoped() *subscriptionDODo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriptionDODo) Create(values ...*po.SubscriptionPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriptionDODo) CreateInBatches(values []*po.SubscriptionPO, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriptionDODo) Save(values ...*po.SubscriptionPO) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriptionDODo) First() (*po.SubscriptionPO, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.SubscriptionPO), nil
	}
}

func (s subscriptionDODo) Take() (*po.SubscriptionPO, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.SubscriptionPO), nil
	}
}

func (s subscriptionDODo) Last() (*po.SubscriptionPO, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.SubscriptionPO), nil
	}
}

func (s subscriptionDODo) Find() ([]*po.SubscriptionPO, error) {
	result, err := s.DO.Find()
	return result.([]*po.SubscriptionPO), err
}

func (s subscriptionDODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.SubscriptionPO, err error) {
	buf := make([]*po.SubscriptionPO, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriptionDODo) FindInBatches(result *[]*po.SubscriptionPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriptionDODo) Attrs(attrs ...field.AssignExpr) *subscriptionDODo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriptionDODo) Assign(attrs ...field.AssignExpr) *subscriptionDODo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriptionDODo) Joins(fields ...field.RelationField) *subscriptionDODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriptionDODo) Preload(fields ...field.RelationField) *subscriptionDODo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriptionDODo) FirstOrInit() (*po.SubscriptionPO, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.SubscriptionPO), nil
	}
}

func (s subscriptionDODo) FirstOrCreate() (*po.SubscriptionPO, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.SubscriptionPO), nil
	}
}

func (s subscriptionDODo) FindByPage(offset int, limit int) (result []*po.SubscriptionPO, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriptionDODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriptionDODo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriptionDODo) Delete(models ...*po.SubscriptionPO) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriptionDODo) withDO(do gen.Dao) *subscriptionDODo {
	s.DO = *do.(*gen.DO)
	return s
}
