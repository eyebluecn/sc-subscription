// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/eyebluecn/sc-misc/src/model/po"
)

func newOrderPO(db *gorm.DB, opts ...gen.DOOption) orderPO {
	_orderPO := orderPO{}

	_orderPO.orderPODo.UseDB(db, opts...)
	_orderPO.orderPODo.UseModel(&po.OrderPO{})

	tableName := _orderPO.orderPODo.TableName()
	_orderPO.ALL = field.NewAsterisk(tableName)
	_orderPO.ID = field.NewInt64(tableName, "id")
	_orderPO.CreateTime = field.NewTime(tableName, "create_time")
	_orderPO.UpdateTime = field.NewTime(tableName, "update_time")
	_orderPO.No = field.NewString(tableName, "no")
	_orderPO.ReaderID = field.NewInt64(tableName, "reader_id")
	_orderPO.ColumnID = field.NewInt64(tableName, "column_id")
	_orderPO.ColumnQuoteID = field.NewInt64(tableName, "column_quote_id")
	_orderPO.PaymentID = field.NewInt64(tableName, "payment_id")
	_orderPO.Price = field.NewInt64(tableName, "price")
	_orderPO.Status = field.NewInt32(tableName, "status")

	_orderPO.fillFieldMap()

	return _orderPO
}

// orderPO 订单表
type orderPO struct {
	orderPODo orderPODo

	ALL           field.Asterisk
	ID            field.Int64  // 主键
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间
	No            field.String // 订单唯一编号，整个系统唯一，带有前缀
	ReaderID      field.Int64  // 读者id
	ColumnID      field.Int64  // 专栏id
	ColumnQuoteID field.Int64  // 专栏报价id
	PaymentID     field.Int64  // 支付单id
	Price         field.Int64  // 价格（单位：分）
	Status        field.Int32  // 状态 0/1/2/3/4

	fieldMap map[string]field.Expr
}

func (o orderPO) Table(newTableName string) *orderPO {
	o.orderPODo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderPO) As(alias string) *orderPO {
	o.orderPODo.DO = *(o.orderPODo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderPO) updateTableName(table string) *orderPO {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.No = field.NewString(table, "no")
	o.ReaderID = field.NewInt64(table, "reader_id")
	o.ColumnID = field.NewInt64(table, "column_id")
	o.ColumnQuoteID = field.NewInt64(table, "column_quote_id")
	o.PaymentID = field.NewInt64(table, "payment_id")
	o.Price = field.NewInt64(table, "price")
	o.Status = field.NewInt32(table, "status")

	o.fillFieldMap()

	return o
}

func (o *orderPO) WithContext(ctx context.Context) *orderPODo { return o.orderPODo.WithContext(ctx) }

func (o orderPO) TableName() string { return o.orderPODo.TableName() }

func (o orderPO) Alias() string { return o.orderPODo.Alias() }

func (o orderPO) Columns(cols ...field.Expr) gen.Columns { return o.orderPODo.Columns(cols...) }

func (o *orderPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderPO) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["no"] = o.No
	o.fieldMap["reader_id"] = o.ReaderID
	o.fieldMap["column_id"] = o.ColumnID
	o.fieldMap["column_quote_id"] = o.ColumnQuoteID
	o.fieldMap["payment_id"] = o.PaymentID
	o.fieldMap["price"] = o.Price
	o.fieldMap["status"] = o.Status
}

func (o orderPO) clone(db *gorm.DB) orderPO {
	o.orderPODo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderPO) replaceDB(db *gorm.DB) orderPO {
	o.orderPODo.ReplaceDB(db)
	return o
}

type orderPODo struct{ gen.DO }

func (o orderPODo) Debug() *orderPODo {
	return o.withDO(o.DO.Debug())
}

func (o orderPODo) WithContext(ctx context.Context) *orderPODo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderPODo) ReadDB() *orderPODo {
	return o.Clauses(dbresolver.Read)
}

func (o orderPODo) WriteDB() *orderPODo {
	return o.Clauses(dbresolver.Write)
}

func (o orderPODo) Session(config *gorm.Session) *orderPODo {
	return o.withDO(o.DO.Session(config))
}

func (o orderPODo) Clauses(conds ...clause.Expression) *orderPODo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderPODo) Returning(value interface{}, columns ...string) *orderPODo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderPODo) Not(conds ...gen.Condition) *orderPODo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderPODo) Or(conds ...gen.Condition) *orderPODo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderPODo) Select(conds ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderPODo) Where(conds ...gen.Condition) *orderPODo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderPODo) Order(conds ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderPODo) Distinct(cols ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderPODo) Omit(cols ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderPODo) Join(table schema.Tabler, on ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderPODo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderPODo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderPODo) RightJoin(table schema.Tabler, on ...field.Expr) *orderPODo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderPODo) Group(cols ...field.Expr) *orderPODo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderPODo) Having(conds ...gen.Condition) *orderPODo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderPODo) Limit(limit int) *orderPODo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderPODo) Offset(offset int) *orderPODo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderPODo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderPODo) Unscoped() *orderPODo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderPODo) Create(values ...*po.OrderPO) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderPODo) CreateInBatches(values []*po.OrderPO, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderPODo) Save(values ...*po.OrderPO) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderPODo) First() (*po.OrderPO, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*po.OrderPO), nil
	}
}

func (o orderPODo) Take() (*po.OrderPO, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*po.OrderPO), nil
	}
}

func (o orderPODo) Last() (*po.OrderPO, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*po.OrderPO), nil
	}
}

func (o orderPODo) Find() ([]*po.OrderPO, error) {
	result, err := o.DO.Find()
	return result.([]*po.OrderPO), err
}

func (o orderPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*po.OrderPO, err error) {
	buf := make([]*po.OrderPO, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderPODo) FindInBatches(result *[]*po.OrderPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderPODo) Attrs(attrs ...field.AssignExpr) *orderPODo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderPODo) Assign(attrs ...field.AssignExpr) *orderPODo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderPODo) Joins(fields ...field.RelationField) *orderPODo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderPODo) Preload(fields ...field.RelationField) *orderPODo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderPODo) FirstOrInit() (*po.OrderPO, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*po.OrderPO), nil
	}
}

func (o orderPODo) FirstOrCreate() (*po.OrderPO, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*po.OrderPO), nil
	}
}

func (o orderPODo) FindByPage(offset int, limit int) (result []*po.OrderPO, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderPODo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderPODo) Delete(models ...*po.OrderPO) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderPODo) withDO(do gen.Dao) *orderPODo {
	o.DO = *do.(*gen.DO)
	return o
}
